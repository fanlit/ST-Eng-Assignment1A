#!/bin/bash

#########
# Setup #
#########

DATETIME=$(date "+%d-%m-%y %r")
SUBJFILE='/etc/login.defs'
KEY='PASS_MAX_DAYS'
REQ='1D'
STDOUTLOGFILE=$1
echo "" >> "$STDOUTLOGFILE"
echo "# $REQ. Ensure password expiration is 90 days or less #########################" >> "$STDOUTLOGFILE"
echo "Subject File: $SUBJFILE" >> "$STDOUTLOGFILE"
echo "Key: $KEY" >> "$STDOUTLOGFILE"

#####################
# Utility Functions #
#####################

convert(){
        # local SUBJLINE=$(grep -E -m 1 "^\s*$KEY\s+" $SUBJFILE | awk '{$1=$1};{print $2}')
        SUBJLINE=$1
        local CHECKED=""
        local locCONVERT=""
        local ISNEGATIVE=$(echo "$SUBJLINE" | grep -E "^-.*" | wc -l)
        local VALID=false
        # Check and convert HEX -> DECI
        if [ $( echo "$SUBJLINE" | grep -iE "^-*0x[1-9a-f]+$" | wc -l) -eq 1 ]
        then
                #CHECKED=$(echo "$SUBJLINE" | sed "s/^-*0[xX]//"| sed "y/abcdef/ABCDEF/")
                locCONVERT=$((16#$(echo "$SUBJLINE" | sed "s/^-*0[xX]//"| sed "y/abcdef/ABCDEF/")))
                VALID=true

        # Check and convert OCT -> DECI
        elif [ $( echo "$SUBJLINE" | grep -E "^-*0[0-7]+$" | wc -l) -eq 1 ]
        then
                #CHECKED=$(echo "$SUBJLINE" | sed "s/^-*0//")
                locCONVERT=$((8#$(echo "$SUBJLINE" | sed "s/^-*0//")))
                VALID=true
        # Check DECI
        elif [ $( echo "$SUBJLINE" | grep -E "^-*([0-9]{1,})$" | wc -l) -eq 1 ]
        then
                locCONVERT=$SUBJLINE
                VALID=true
        fi

        # Check valid value.
        if [ $VALID == true ]
        then
                if [ $ISNEGATIVE -eq 1 ]
                then
                        echo "-$(($locCONVERT))"
                else
                        echo "$(($locCONVERT))"
                fi
        else
                echo "-2"
        fi
}

#############################
# 1: Subject file not found #
#############################
if [ ! -f "$SUBJFILE" ]
then
        echo "Req $REQ Testcase 1: FAIL: Subject file not found." >> "$STDOUTLOGFILE"
	exit 1
fi

####################
# 2: Key not found #
####################
if [ $( grep "^\s*$KEY\s*" "$SUBJFILE" | wc -l) -eq 0 ]
then
	echo "Req $REQ Testcase 2: FAIL: Key cannot be found." >> "$STDOUTLOGFILE"
	exit 1
fi

##########################
# 3: No associated value #
##########################
CMDOUT=$( grep "^\s*$KEY\s*" "$SUBJFILE" | tail -1 | grep "^\s*$KEY\s*$" | wc -l)
if [ "$CMDOUT" -ne 0 ]
then
	echo "Req $REQ Testcase 3: FAIL: No value." >> "$STDOUTLOGFILE"
	exit 1
fi

######################
# 4. Multiple values #
######################
CMDOUT=$( grep -E "^\s*$KEY\s+" $SUBJFILE | tail -1 | grep -E "^\s*$KEY\s(-*.+\s+.+\s*)+$" $SUBJFILE | wc -l)
if [ "$CMDOUT" -ne 0 ]
then
        echo "Req $REQ Testcase 4: FAIL: Multiple values" >> "$STDOUTLOGFILE"
        exit 1
fi


###############################
# Shared values: Testcase 5-7 #
###############################
CONVERTED=$(convert "$(grep -E "^\s*$KEY\s+" $SUBJFILE | tail -1 | awk '{$1=$1};{print $2}')")

####################
# 5. Invalid value #
####################
if [[ $CONVERTED -lt -1 || $CONVERTED -gt 99999 ]]
then
	echo "Req $REQ Testcase 5: FAIL: Invalid value." >> "$STDOUTLOGFILE"
	exit 1
fi

##########################
# 6. Non-Compliant value #
##########################
if [[ $CONVERTED -eq -1 || $CONVERTED -gt 90 ]]
then
        echo "Req $REQ Testcase 6: FAIL: Non-compliant value." >> "$STDOUTLOGFILE"
        exit 1
fi

######################
# 7. Compliant value #
######################
if [[ $CONVERTED -ge 0 && $CONVERTED -le 90 ]]
then
        echo "Req $REQ: PASS" >> "$STDOUTLOGFILE"
        exit 0
fi
